/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.view;

import com.config.Configs;
import static com.config.Configs.fetchingAliexKeywords;
import com.utils.StringUtils;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;

/**
 *
 * @author Admin
 */
public class SettingPannel extends BasePanel {

    /**
     * Creates new form SettingPannel
     */
    JFileChooser chooser;
    String choosertitle;

    public SettingPannel() {
        initComponents();
        
//        jPanel2.show(false);

        setTitle("Setting");
        setMenuActionCommand("Setting");

        comboBoxPrice.setModel(new javax.swing.DefaultComboBoxModel(Configs.listPrice));

        if (Configs.lastPriceLimitIndex >= 0 && Configs.lastPriceLimitIndex < Configs.listPrice.length) {
            comboBoxPrice.setSelectedIndex(Configs.lastPriceLimitIndex);
        } else {
            Configs.lastPriceLimitIndex = 5;
            comboBoxPrice.setSelectedIndex(5);
        }

//        jComboBoxMarket.setModel(new javax.swing.DefaultComboBoxModel(listMarket));
        Configs.priceLimit = Configs.listPriceValue[Configs.lastPriceLimitIndex];

        comboPriceRate.setModel(new javax.swing.DefaultComboBoxModel(Configs.listPriceRate));

        if (Configs.lastPriceRateIndex >= 0 && Configs.lastPriceRateIndex < Configs.listPriceRate.length) {
            comboPriceRate.setSelectedIndex(Configs.lastPriceRateIndex);
        } else {
            Configs.lastPriceRateIndex = 2;
            comboPriceRate.setSelectedIndex(2);
        }
        
        txtVpsIp.setText(Configs.vpsIp);
        tfMaxRow.setText("" + Configs.maxRow);
        
        checkBoxFetchingAliexKeys.setSelected(Configs.fetchingAliexKeywords == 1);
        checkBoxFeatureFromDes.setSelected(Configs.usingFeatureFromDes == 1);
        checkboxFetchingImgFromDes.setSelected(Configs.fetchingImageFromDes == 1);
        checkBoxAliexpressStandard.setSelected(Configs.filterAliexpress == 1);
        checkBoxEpacket.setSelected(Configs.filterEpacket == 1);
        checkBoxAlieDirect.setSelected(Configs.filterAliDirect == 1);

//        ButtonGroup groupDataLv = new ButtonGroup();
//        groupDataLv.add(jRadioButtonStoreDataNormal);
//        groupDataLv.add(jRadioButtonStoreDataAdvanLite);
//        groupDataLv.add(jRadioButtonStoreDataAdvanFull);
//        switch (Configs.dataLevel) {
//            case 1:
//                jRadioButtonStoreDataNormal.setSelected(true);
//                break;
//            case 5:
//                jRadioButtonStoreDataAdvanLite.setSelected(true);
//                break;
//            case 6:
//                jRadioButtonStoreDataAdvanFull.setSelected(true);
//                break;
////            case 3:
////                jRadioButtonStoreDataLv3.setSelected(true);
////                break;
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboBoxPrice = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        comboPriceRate = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        checkBoxOnlyOUS = new javax.swing.JCheckBox();
        checkBoxMergeAllFile = new javax.swing.JCheckBox();
        checkBoxFetchingAliexKeys = new javax.swing.JCheckBox();
        checkBoxFeatureFromDes = new javax.swing.JCheckBox();
        checkboxFetchingImgFromDes = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        checkBoxEpacket = new javax.swing.JCheckBox();
        checkBoxAliexpressStandard = new javax.swing.JCheckBox();
        checkBoxAlieDirect = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtVpsIp = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tfMaxRow = new javax.swing.JTextField();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Price Config"));

        jLabel1.setText("Price Limit");

        comboBoxPrice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1000$", "Item 2", "Item 3", "Item 4" }));
        comboBoxPrice.setToolTipText("");
        comboBoxPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxPriceActionPerformed(evt);
            }
        });

        jLabel5.setText("Price Rate:");

        comboPriceRate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "x2.5", "Item 2", "Item 3", "Item 4" }));
        comboPriceRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPriceRateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboBoxPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboPriceRate, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(comboPriceRate))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Store Config"));

        checkBoxOnlyOUS.setText("Only Ship From US");
        checkBoxOnlyOUS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxOnlyOUSActionPerformed(evt);
            }
        });

        checkBoxMergeAllFile.setText("Merge all files");
        checkBoxMergeAllFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMergeAllFileActionPerformed(evt);
            }
        });

        checkBoxFetchingAliexKeys.setText("Fetching Aliex Keys");
        checkBoxFetchingAliexKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxFetchingAliexKeysActionPerformed(evt);
            }
        });

        checkBoxFeatureFromDes.setText("Use feature from des as bullet points");
        checkBoxFeatureFromDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxFeatureFromDesActionPerformed(evt);
            }
        });

        checkboxFetchingImgFromDes.setText("Fetching image from des");
        checkboxFetchingImgFromDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxFetchingImgFromDesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(checkBoxOnlyOUS, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxMergeAllFile)
                        .addGap(26, 26, 26)
                        .addComponent(checkBoxFetchingAliexKeys))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxFeatureFromDes)
                            .addComponent(checkboxFetchingImgFromDes))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxOnlyOUS)
                    .addComponent(checkBoxMergeAllFile)
                    .addComponent(checkBoxFetchingAliexKeys))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkBoxFeatureFromDes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkboxFetchingImgFromDes))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Shipping Methods"));
        jPanel2.setFocusCycleRoot(true);

        checkBoxEpacket.setSelected(true);
        checkBoxEpacket.setText("ePacket");
        checkBoxEpacket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxEpacketActionPerformed(evt);
            }
        });

        checkBoxAliexpressStandard.setSelected(true);
        checkBoxAliexpressStandard.setText("AliExpress Standard");
        checkBoxAliexpressStandard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAliexpressStandardActionPerformed(evt);
            }
        });

        checkBoxAlieDirect.setSelected(true);
        checkBoxAlieDirect.setText("Ali Direct");
        checkBoxAlieDirect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAlieDirectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkBoxEpacket)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(checkBoxAliexpressStandard)
                .addGap(56, 56, 56)
                .addComponent(checkBoxAlieDirect)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxEpacket)
                    .addComponent(checkBoxAliexpressStandard)
                    .addComponent(checkBoxAlieDirect)))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("VPS Info"));

        jLabel2.setText("VPS Ip (Để trống để chạy với chế độ mặc định)");

        txtVpsIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVpsIpActionPerformed(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("MaxRow");

        tfMaxRow.setText("1000");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(txtVpsIp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfMaxRow, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfMaxRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVpsIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxPriceActionPerformed
        // TODO add your handling code here:
        int index = comboBoxPrice.getSelectedIndex();

        //        int index = comboBoxProductTypes.getSelectedIndex();
        try {
            Configs.updatePriceLimitConfig(index);
        } catch (IOException ex) {
        } finally {
            Configs.priceLimit = Configs.listPriceValue[Configs.lastPriceLimitIndex];
        }
    }//GEN-LAST:event_comboBoxPriceActionPerformed

    private void checkBoxOnlyOUSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxOnlyOUSActionPerformed
        // TODO add your handling code here:
        Configs.isOnlyUS = checkBoxOnlyOUS.isSelected();
    }//GEN-LAST:event_checkBoxOnlyOUSActionPerformed

    private void comboPriceRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPriceRateActionPerformed
        // TODO add your handling code here:
        int index = comboPriceRate.getSelectedIndex();

        try {
            Configs.updatePriceRateConfig(index);
        } catch (IOException ex) {
        } finally {
            Configs.priceRate = Configs.listPriceRateValue[Configs.lastPriceRateIndex];
        }
    }//GEN-LAST:event_comboPriceRateActionPerformed

    private void checkBoxEpacketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxEpacketActionPerformed
        // TODO add your handling code here:
        Configs.changeFilterEpacket(checkBoxEpacket.isSelected() ? 1 : 0);
    }//GEN-LAST:event_checkBoxEpacketActionPerformed

    private void checkBoxAliexpressStandardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAliexpressStandardActionPerformed
        // TODO add your handling code here:
        Configs.changeFilterAliexpress(checkBoxAliexpressStandard.isSelected() ? 1 : 0);
    }//GEN-LAST:event_checkBoxAliexpressStandardActionPerformed

    private void txtVpsIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVpsIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVpsIpActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String ip = txtVpsIp.getText();
        try {
            Configs.changeVpsIpConfig(ip);
        } catch (IOException ex) {
            Logger.getLogger(SettingPannel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String maxRowStr = tfMaxRow.getText();
        try {
            Configs.changeMaxRow(Integer.parseInt(maxRowStr));
        } catch (NumberFormatException | IOException ex) {
            Logger.getLogger(SettingPannel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void checkBoxMergeAllFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMergeAllFileActionPerformed
        // TODO add your handling code here:
        Configs.isMergeAllFile = checkBoxMergeAllFile.isSelected();
    }//GEN-LAST:event_checkBoxMergeAllFileActionPerformed

    private void checkBoxFetchingAliexKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxFetchingAliexKeysActionPerformed
        // TODO add your handling code here:
        Configs.changeALiexFetchingKey(checkBoxFetchingAliexKeys.isSelected() ? 1 : 0);
    }//GEN-LAST:event_checkBoxFetchingAliexKeysActionPerformed

    private void checkBoxFeatureFromDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxFeatureFromDesActionPerformed
        // TODO add your handling code here:
        Configs.changeUsingFeatureFromDes(checkBoxFeatureFromDes.isSelected() ? 1 : 0);
    }//GEN-LAST:event_checkBoxFeatureFromDesActionPerformed

    private void checkboxFetchingImgFromDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxFetchingImgFromDesActionPerformed
        // TODO add your handling code here:
        Configs.changeFetchingImageFromDes(checkboxFetchingImgFromDes.isSelected() ? 1 : 0);
    }//GEN-LAST:event_checkboxFetchingImgFromDesActionPerformed

    private void checkBoxAlieDirectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAlieDirectActionPerformed
        Configs.changeFilterAliDirect(checkBoxAlieDirect.isSelected() ? 1 : 0);
    }//GEN-LAST:event_checkBoxAlieDirectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBoxAlieDirect;
    private javax.swing.JCheckBox checkBoxAliexpressStandard;
    private javax.swing.JCheckBox checkBoxEpacket;
    private javax.swing.JCheckBox checkBoxFeatureFromDes;
    private javax.swing.JCheckBox checkBoxFetchingAliexKeys;
    private javax.swing.JCheckBox checkBoxMergeAllFile;
    private javax.swing.JCheckBox checkBoxOnlyOUS;
    private javax.swing.JCheckBox checkboxFetchingImgFromDes;
    private javax.swing.JComboBox<String> comboBoxPrice;
    private javax.swing.JComboBox<String> comboPriceRate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField tfMaxRow;
    private javax.swing.JTextField txtVpsIp;
    // End of variables declaration//GEN-END:variables
}
